package com.stephenott.stix.type.vocab

class MalwareCapabilities(private val capabilities: LinkedHashSet<MalwareCapability> = linkedSetOf()) :
    Set<MalwareCapability> by capabilities {
}

class MalwareCapability(private val capability: String) : OpenVocab {

    override fun getValue(): String {
        return capability
    }

    companion object {

        const val vocabName = "malware-capabilities-ov"

        var vocab: LinkedHashSet<String> = linkedSetOf(
            "accesses-remote-machines", "anti-debugging", "anti-disassembly",
            "anti-emulation", "anti-memory-forensics", "anti-sandbox",
            "anti-vm", "captures-input-peripherals", "captures-output-peripherals",
            "captures-system-state-data", "cleans-traces-of-infection", "commits-fraud",
            "communicates-with-c2", "compromises-data-availability", "compromises-data-integrity",
            "compromises-system-availability", "controls-local-machine", "degrades-security-software",
            "degrades-system-updates", "determines-c2-server", "emails-spam",
            "escalates-privileges", "evades-av", "exfiltrates-data",
            "fingerprints-host", "hides-artifacts", "hides-executing-code",
            "infects-files", "infects-remote-machines", "installs-other-components",
            "persists-after-system-reboot", "prevents-artifact-access", "prevents-artifact-deletion",
            "probes-network-environment", "self-modifies", "steals-authentication-credentials",
            "violates-system-operational-integrity"
        )
            set(value) {
                require(value.isNotEmpty())
                field = value
            }
    }

    init {
        require(this.capability in vocab)
    }
}