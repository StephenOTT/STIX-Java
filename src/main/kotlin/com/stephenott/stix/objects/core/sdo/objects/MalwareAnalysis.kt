package com.stephenott.stix.objects.core.sdo.objects

import com.stephenott.stix.Stix
import com.stephenott.stix.common.BusinessRulesValidator
import com.stephenott.stix.common.CompanionAllowedRelationships
import com.stephenott.stix.common.CompanionStixType
import com.stephenott.stix.common.requireStixType
import com.stephenott.stix.objects.core.sco.objects.SoftwareSco
import com.stephenott.stix.objects.core.sdo.StixDomainObject
import com.stephenott.stix.objects.core.sro.objects.AllowedRelationship
import com.stephenott.stix.objects.core.sro.objects.RelationshipSro
import com.stephenott.stix.type.*
import com.stephenott.stix.type.vocab.MalwareAvResult

interface MalwareAnalysisSdo : StixDomainObject {
    val product: Product
    val version: String?
    val hostVmRef: StixIdentifier?
    val operatingSystemRef: StixIdentifier?
    val installedSystemRefs: StixIdentifiers?
    val configurationVersion: String?
    val modules: StixStringList?
    val analysisEngineVersion: String?
    val analysisDefinitionVersion: String?
    val submitted: StixTimestamp?
    val analysisStarted: StixTimestamp?
    val analysisEnded: StixTimestamp?
    val avResult: MalwareAvResult?
    val analysisScoRefs: StixIdentifiers?

    companion object : CompanionStixType,
        BusinessRulesValidator<MalwareAnalysisSdo>,
        CompanionAllowedRelationships {

        override val stixType = StixType("malware-analysis")

        override fun objectValidationRules(obj: MalwareAnalysisSdo, stixInstance: Stix) {
            requireStixType(this.stixType, obj)

            //@TODO Product Name Validation enhancement: The name of the analysis engine or product that was used. Product names ​SHOULD​ be all lowercase with words separated by a dash "-". For cases where the name of a product cannot be specified, a value of "anonymized" MUST ​be used.

            require(obj.hostVmRef?.type == SoftwareSco.stixType,
                lazyMessage = {"host_vm_ref must only reference a software SCO."})

            require(obj.operatingSystemRef?.type == SoftwareSco.stixType,
                lazyMessage = {"operating_system_ref must only reference a software SCO."})

            require(obj.installedSystemRefs?.all { it.type == SoftwareSco.stixType }!!,
                lazyMessage = {"installed_system_refs must only have values that reference a software SCO."})
        }

        override val allowedRelationships: List<AllowedRelationship> = listOf(
            AllowedRelationship(
                MalwareAnalysisSdo::class,
                RelationshipType("characterizes"),
                MalwareSdo::class
            ),
            AllowedRelationship(
                MalwareAnalysisSdo::class,
                RelationshipType("av-analysis-of"),
                MalwareSdo::class
            ),
            AllowedRelationship(
                MalwareAnalysisSdo::class,
                RelationshipType("static-analysis-of"),
                MalwareSdo::class
            ),
            AllowedRelationship(
                MalwareAnalysisSdo::class,
                RelationshipType("dynamic-analysis-of"),
                MalwareSdo::class
            )
        )
    }
}

data class MalwareAnalysis
    (
            override val product: Product,
            override val version: String? = null,
            override val hostVmRef: StixIdentifier? = null,
            override val operatingSystemRef: StixIdentifier? = null,
            override val installedSystemRefs: StixIdentifiers? = null,
            override val configurationVersion: String? = null,
            override val modules: StixStringList? = null,
            override val analysisEngineVersion: String? = null,
            override val analysisDefinitionVersion: String? = null,
            override val submitted: StixTimestamp? = null,
            override val analysisStarted: StixTimestamp? = null,
            override val analysisEnded: StixTimestamp? = null,
            override val avResult: MalwareAvResult? = null,
            override val analysisScoRefs: StixIdentifiers? = null,
            override val type: StixType = MalwareAnalysisSdo.stixType,
            override val id: StixIdentifier = StixIdentifier(type),
            override val createdByRef: String? = null,
            override val created: StixTimestamp = StixTimestamp(),
            override val externalReferences: ExternalReferences? = null,
            override val objectMarkingsRefs: String? = null,
            override val granularMarkings: String? = null,
            override val specVersion: StixSpecVersion = StixSpecVersion(),
            override val labels: StixLabels? = null,
            override val modified: StixTimestamp = StixTimestamp(created),
            override val revoked: StixBoolean = StixBoolean(),
            override val confidence: StixConfidence? = null,
            override val lang: StixLang? = null,
            override val stixInstance: Stix = Stix.defaultStixInstance,
            override val stixValidateOnConstruction: Boolean = Stix.defaultValidateOnConstruction
) : MalwareAnalysisSdo {

    init {
        if (this.stixValidateOnConstruction) {
            MalwareAnalysisSdo.objectValidationRules(this, stixInstance)
        }
    }

    override fun allowedRelationships(): List<AllowedRelationship> {
        return MalwareAnalysisSdo.allowedRelationships + RelationshipSro.allowedCommonRelationships
    }
}