package com.stephenott.stix.objects.core.sdo.objects

import com.stephenott.stix.Stix
import com.stephenott.stix.common.BusinessRulesValidator
import com.stephenott.stix.common.CompanionAllowedRelationships
import com.stephenott.stix.common.CompanionStixType
import com.stephenott.stix.common.requireStixType
import com.stephenott.stix.objects.core.sco.objects.*
import com.stephenott.stix.objects.core.sdo.StixDomainObject
import com.stephenott.stix.objects.core.sro.objects.AllowedRelationship
import com.stephenott.stix.objects.core.sro.objects.RelationshipSro
import com.stephenott.stix.type.*
import com.stephenott.stix.type.vocab.*

interface MalwareSdo : StixDomainObject {
    val name: String?
    val description: String?
    val malwareTypes: MalwareTypes
    val isFamily: StixBoolean
    val aliases: StixStringList?
    val killChainPhases: KillChainPhases?
    val firstSeen: StixTimestamp?
    val lastSeen: StixTimestamp?
    val osExecutionEnvs: OsExecutionEnvs?
    val architectureExecutionEnvs: ProcessorArchitectures?
    val implementationLanguage: ImplementationLanguages?
    val capabilities: MalwareCapabilities?
    val sampleRefs: StixIdentifiers?

    companion object : CompanionStixType,
        BusinessRulesValidator<MalwareSdo>,
        CompanionAllowedRelationships {

        override val stixType = StixType("malware")

        override fun objectValidationRules(obj: MalwareSdo, stixInstance: Stix) {
            requireStixType(this.stixType, obj)

            if (obj.firstSeen != null && obj.lastSeen != null) {
                require(obj.lastSeen!!.instant >= obj.firstSeen!!.instant,
                    lazyMessage = { "last_seen must greater than or equal to first_seen." })
            }
        }

        override val allowedRelationships: List<AllowedRelationship> = listOf(
            //@TODO convert allowedrelationship to a Kotlin DSL
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("authored-by"),
                ThreatActorSdo::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("authored-by"),
                IntrusionSetSdo::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("beacons-to"),
                InfrastructureSdo::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("exfiltrates-to"),
                InfrastructureSdo::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("communicates-with"),
                IPv4AddressSco::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("communicates-with"),
                IPv6AddressSco::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("communicates-with"),
                DomainNameSco::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("communicates-with"),
                UrlSco::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("controls"),
                MalwareSdo::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("downloads"),
                MalwareSdo::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("downloads"),
                ToolSdo::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("downloads"),
                FileSco::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("drops"),
                MalwareSdo::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("drops"),
                ToolSdo::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("drops"),
                FileSco::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("exploits"),
                VulnerabilitySdo::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("originates-from"),
                LocationSdo::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("targets"),
                IdentitySdo::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("targets"),
                InfrastructureSdo::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("targets"),
                LocationSdo::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("targets"),
                VulnerabilitySdo::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("uses"),
                AttackPatternSdo::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("uses"),
                InfrastructureSdo::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("uses"),
                MalwareSdo::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("uses"),
                ToolSdo::class
            ),
            AllowedRelationship(
                MalwareSdo::class,
                RelationshipType("variant-of"),
                MalwareSdo::class
            )
        )
    }
}

data class Malware
    (
            override val name: String,
            override val description: String? = null,
            override val malwareTypes: MalwareTypes,
            override val isFamily: StixBoolean,
            override val aliases: StixStringList? = null,
            override val killChainPhases: KillChainPhases? = null,
            override val firstSeen: StixTimestamp? = null,
            override val lastSeen: StixTimestamp? = null,
            override val osExecutionEnvs: OsExecutionEnvs? = null,
            override val architectureExecutionEnvs: ProcessorArchitectures? = null,
            override val implementationLanguage: ImplementationLanguages? = null,
            override val capabilities: MalwareCapabilities? = null,
            override val sampleRefs: StixIdentifiers? = null,
            override val type: StixType = MalwareSdo.stixType,
            override val id: StixIdentifier = StixIdentifier(type),
            override val createdByRef: String? = null,
            override val created: StixTimestamp = StixTimestamp(),
            override val externalReferences: ExternalReferences? = null,
            override val objectMarkingsRefs: String? = null,
            override val granularMarkings: String? = null,
            override val specVersion: StixSpecVersion = StixSpecVersion(),
            override val labels: StixLabels? = null,
            override val modified: StixTimestamp = StixTimestamp(created),
            override val revoked: StixBoolean = StixBoolean(),
            override val confidence: StixConfidence? = null,
            override val lang: StixLang? = null,
            override val stixInstance: Stix = Stix.defaultStixInstance,
            override val stixValidateOnConstruction: Boolean = Stix.defaultValidateOnConstruction
) : MalwareSdo {

    init {
        if (this.stixValidateOnConstruction) {
            MalwareSdo.objectValidationRules(this, stixInstance)
        }
    }

    override fun allowedRelationships(): List<AllowedRelationship> {
        return MalwareSdo.allowedRelationships + RelationshipSro.allowedCommonRelationships
    }

}